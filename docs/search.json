[
  {
    "objectID": "walkthrough.html",
    "href": "walkthrough.html",
    "title": "Analysis Walkthrough Example",
    "section": "",
    "text": "Run the code below to load the data.\nIt will create a dataframe called impeach, which contains a row for every House Democrat and whether or not the member publicly called for impeachment in the case of the first Trump impeachment.\nAdditionally, a series of election results and demographics are included related to each member’s district.\n\n\nCode\nimpeach <- readRDS(\"impeach.rds\")\n\n\n\n\n\nWrite your code using grouping in the chunks below to help answer the following questions.\n\nHow many members in the dataset favor impeachment vs. not (using the for_impeachment column)?\n\n\n\nCode\nimpeach %>% \n  group_by(for_impeachment) %>% \n  summarise(n())\n\n\n# A tibble: 2 × 2\n  for_impeachment `n()`\n  <chr>           <int>\n1 NO                 26\n2 YES               209\n\n\nCode\n#grouped by for impeachment than summarized\n\n\n\nSimilar to #1 above, using grouping to now break down the Democratic House members by TWO measures: those who are for or against impeachment (as you did above)….and then districts above/below national GDP.\n\nYou’ll want to ensure you do the grouping on both columns together, e.g. group_by(column1, column2)\n\n\nCode\nimpeach %>% \n  filter(party == \"D\") %>% \n  group_by(for_impeachment,gdp_above_national) %>% \n  summarise(n())\n\n\n`summarise()` has grouped output by 'for_impeachment'. You can override using\nthe `.groups` argument.\n\n\n# A tibble: 4 × 3\n# Groups:   for_impeachment [2]\n  for_impeachment gdp_above_national `n()`\n  <chr>           <chr>              <int>\n1 NO              ABOVE                  7\n2 NO              BELOW                 19\n3 YES             ABOVE                126\n4 YES             BELOW                 83\n\n\nCode\n#filtered for Dems, grouped by for impeachment and national gdp, then summarized\n\n\n\nNow do the same as #2, but this time instead of GDP, group by whether the district is above or below the national average for the percentage of college graduates. The column that captures this information is pct_bachelors_compared_to_national.\n\n\n\nCode\nimpeach %>% \n  filter(party == \"D\") %>% \n  group_by(for_impeachment,pct_bachelors_compared_to_national) %>% \n  summarise(n())\n\n\n`summarise()` has grouped output by 'for_impeachment'. You can override using\nthe `.groups` argument.\n\n\n# A tibble: 4 × 3\n# Groups:   for_impeachment [2]\n  for_impeachment pct_bachelors_compared_to_national `n()`\n  <chr>           <chr>                              <int>\n1 NO              ABOVE                                  7\n2 NO              BELOW                                 19\n3 YES             ABOVE                                128\n4 YES             BELOW                                 81\n\n\nCode\n#filtered for Dems, grouped by for impeachment and pct bachelors, then summarized.\n\n\n\nLet’s look at the college graduation comparison in a slightly different way.\n\nInstead of counting how many districts are above/below the national average, this time summarize by the MEAN percentage of college grads (located in the column pct_bachelors) for districts that are Yes for impeachment vs. No.\nIn other words, you want to end up with the calculated mean for what that percentage is for the Yes districts and the No districts.\n\n\nCode\nimpeach %>% \n  filter(party == \"D\") %>% \n  group_by(for_impeachment) %>% \n  summarise(mean(pct_bachelors))\n\n\n# A tibble: 2 × 2\n  for_impeachment `mean(pct_bachelors)`\n  <chr>                           <dbl>\n1 NO                               27.7\n2 YES                              33.7\n\n\nCode\n#filtered for Dems, grouped by for impeachment, then summarized using the mean of percent of pop w bachelors degree.\n\n\n\nDo the same as #4, but this time show the MEAN percentage of the vote that Donald Trump received for districts that are Yes for impeachment vs. No.\nThe relevant column for that is trump_percent.\n\n\n\nCode\nimpeach %>% \n  filter(party == \"D\") %>% \n  group_by(for_impeachment) %>% \n  summarise(mean(trump_percent))\n\n\n# A tibble: 2 × 2\n  for_impeachment `mean(trump_percent)`\n  <chr>                           <dbl>\n1 NO                               43.8\n2 YES                              32.0\n\n\nCode\n#filtered for Dems, grouped by for impeachment, then summarized with mean of pop that voted for Trump.\n\n\n\nFilter out only the members who are a yes for impeachment. Then of those “Yes” member, how many won their 2018 election by less than 5 percentage points (margin_flag_2018) vs. more?\n\n\n\nCode\nimpeach %>% \n  filter(party == \"D\", for_impeachment == \"YES\" ) %>% \n  group_by(margin_flag_2018) %>% \n  summarise(n())\n\n\n# A tibble: 2 × 2\n  margin_flag_2018   `n()`\n  <chr>              <int>\n1 5_points_or_less      17\n2 more_than_5_points   192\n\n\nCode\n#Filtered for Dems who voted YES, grouped by 2018 margin, then summarized.\n\n\n\nCome up with another breakdown of your choosing for how you’d like to examine this dataset. Say what you’ll look at, and then put the code below to find the answer.\n\n\n\nCode\n#I want to look at the state breakdown of reps who voted no on impeachment.\n\nimpeach %>% \n  filter(for_impeachment==\"NO\") %>% \n  group_by(state) %>% \n  summarise(n())\n\n\n# A tibble: 20 × 2\n   state `n()`\n   <chr> <int>\n 1 AL        1\n 2 AZ        1\n 3 FL        2\n 4 GA        1\n 5 HI        1\n 6 IL        1\n 7 KS        1\n 8 ME        1\n 9 MN        1\n10 NJ        1\n11 NM        1\n12 NV        2\n13 NY        2\n14 OK        1\n15 OR        1\n16 PA        1\n17 SC        1\n18 TX        4\n19 UT        1\n20 WI        1\n\n\nCode\n#I used this function to explore what states were most prevelent among reps voting NO on impeachment. I filtered for NO, grouped by state, and summarized.\n\n\n\nYou’ll see a column in the table called date_announced. For members who came out as a Yes for impeachment, this is the date they announced their support for it.\n\nUse the mutate() function to create two new columns: one that extracts the year from date_announced, and a second that extracts the month.\n\n\nCode\nimpeach <- impeach %>%\n  mutate(year_ann = year(date_announced),\n        month_ann = month(date_announced))\n\n\n#I made sure to use the <- function to save the change, then used mutate to create a new year and new month column from date_announced.\n\n\n\nUsing the new columns you created in #7, use grouping to count up how many House Democrats during each month announced their support of impeachment.\n\n\n\nCode\nimpeach %>%\n  group_by(month_ann, for_impeachment) %>% \n  summarise(n())\n\n\n`summarise()` has grouped output by 'month_ann'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 10 × 3\n# Groups:   month_ann [10]\n   month_ann for_impeachment `n()`\n       <dbl> <chr>           <int>\n 1         1 YES                 3\n 2         4 YES                 7\n 3         5 YES                39\n 4         6 YES                27\n 5         7 YES                33\n 6         8 YES                18\n 7         9 YES                76\n 8        11 YES                 2\n 9        12 YES                 4\n10        NA NO                 26\n\n\nCode\n#I grouped the month and for impeachment columns, then summarized."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bryn’s Website",
    "section": "",
    "text": "Hi, I’m Bryn and I will be graduating from GW in May. I have a bachelors degree in Political Communication and look forward to exploring life after college."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Bryn’s Website",
    "section": "Education",
    "text": "Education\nThe George Washington University\nSchool of Media and Public Affairs"
  },
  {
    "objectID": "index.html#skills",
    "href": "index.html#skills",
    "title": "Bryn’s Website",
    "section": "Skills",
    "text": "Skills\nMedia Monitoring\nResearch Analysis\nAdvocacy & Campaigns"
  },
  {
    "objectID": "portfolio.html",
    "href": "portfolio.html",
    "title": "Portfolio",
    "section": "",
    "text": "Hi there this is my portfolio page!"
  },
  {
    "objectID": "portfolio.html#press-release-writing-sample",
    "href": "portfolio.html#press-release-writing-sample",
    "title": "Portfolio",
    "section": "Press Release Writing Sample",
    "text": "Press Release Writing Sample\nThis writing sample is a press release on behalf of Physicians for Human Rights (PHR), a New York-based advocacy organization that uses science and medicine to prevent mass atrocities and severe human rights violations."
  },
  {
    "objectID": "portfolio.html#journalistic-writing-sample",
    "href": "portfolio.html#journalistic-writing-sample",
    "title": "Portfolio",
    "section": "Journalistic Writing Sample",
    "text": "Journalistic Writing Sample\nHere is a story on a panel held by The Atlantic Council’s Global Energy Center on energy grid reliability. The event was held in the wake of mass power outages following a winter storm in Texas."
  },
  {
    "objectID": "Mapping.html",
    "href": "Mapping.html",
    "title": "Interactive Maps",
    "section": "",
    "text": "Here is a walkthrough of how I created an interactive map of Pennsylvania, showing the active labor force distribution by county.\n\n\nInteractive Maps with MapView Package\n\n# uncomment to run, then recomment it out so you don't run it every time\n\n#census_api_key(\"KEY\", install=TRUE)\n\n\n#chose variables we want\nmyvars <- c(totalpop = \"B01003_001\",\n            medincome = \"B19013_001\",\n            medage = \"B01002_001\",\n            labor_force = \"B23001_001\")\n\n\n#pull for VA counties\npa_counties_withgeo <- get_acs(geography = \"county\",\n                       variables = c(myvars),\n                       state = \"PA\",\n                       output = \"wide\",\n                       geometry = TRUE)\n\nGetting data from the 2017-2021 5-year ACS\n\n\nDownloading feature geometry from the Census website.  To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`.\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |                                                                      |   1%\n  |                                                                            \n  |=                                                                     |   1%\n  |                                                                            \n  |=                                                                     |   2%\n  |                                                                            \n  |==                                                                    |   2%\n  |                                                                            \n  |==                                                                    |   3%\n  |                                                                            \n  |===                                                                   |   4%\n  |                                                                            \n  |===                                                                   |   5%\n  |                                                                            \n  |====                                                                  |   5%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |=====                                                                 |   7%\n  |                                                                            \n  |=====                                                                 |   8%\n  |                                                                            \n  |======                                                                |   8%\n  |                                                                            \n  |======                                                                |   9%\n  |                                                                            \n  |=======                                                               |   9%\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |========                                                              |  11%\n  |                                                                            \n  |========                                                              |  12%\n  |                                                                            \n  |=========                                                             |  13%\n  |                                                                            \n  |==========                                                            |  14%\n  |                                                                            \n  |===========                                                           |  16%\n  |                                                                            \n  |============                                                          |  18%\n  |                                                                            \n  |=============                                                         |  18%\n  |                                                                            \n  |=============                                                         |  19%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |===============                                                       |  21%\n  |                                                                            \n  |=================                                                     |  25%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |======================                                                |  32%\n  |                                                                            \n  |=========================                                             |  35%\n  |                                                                            \n  |===========================                                           |  39%\n  |                                                                            \n  |==============================                                        |  42%\n  |                                                                            \n  |================================                                      |  46%\n  |                                                                            \n  |==================================                                    |  49%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |====================================================                  |  74%\n  |                                                                            \n  |======================================================                |  77%\n  |                                                                            \n  |========================================================              |  81%\n  |                                                                            \n  |===========================================================           |  84%\n  |                                                                            \n  |=============================================================         |  88%\n  |                                                                            \n  |================================================================      |  91%\n  |                                                                            \n  |==================================================================    |  95%\n  |                                                                            \n  |====================================================================  |  98%\n  |                                                                            \n  |======================================================================| 100%\n\npa_counties_withgeo\n\nSimple feature collection with 67 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -80.51989 ymin: 39.7198 xmax: -74.68952 ymax: 42.26986\nGeodetic CRS:  NAD83\nFirst 10 features:\n   GEOID                                NAME totalpopE totalpopM medincomeE\n1  42129   Westmoreland County, Pennsylvania    355107        NA      64708\n2  42111       Somerset County, Pennsylvania     74331        NA      54332\n3  42097 Northumberland County, Pennsylvania     91853        NA      51005\n4  42131        Wyoming County, Pennsylvania     26389        NA      62795\n5  42051        Fayette County, Pennsylvania    129443        NA      51321\n6  42027         Centre County, Pennsylvania    158879        NA      64995\n7  42005      Armstrong County, Pennsylvania     65967        NA      56838\n8  42041     Cumberland County, Pennsylvania    257333        NA      77001\n9  42095    Northampton County, Pennsylvania    311359        NA      77103\n10 42127          Wayne County, Pennsylvania     51244        NA      56744\n   medincomeM medageE medageM labor_forceE labor_forceM\n1        1350    47.1     0.2       297611          354\n2        1363    46.2     0.2        62347          190\n3        1618    44.4     0.3        75849          196\n4        2881    45.2     0.1        21960           83\n5        1365    45.1     0.1       107462          252\n6        2522    33.5     0.3       137688          212\n7        2537    47.0     0.3        54898           95\n8        1942    40.5     0.2       210420          271\n9        1660    42.1     0.2       257106          386\n10       2673    48.4     0.2        43736          119\n                         geometry\n1  MULTIPOLYGON (((-79.90487 4...\n2  MULTIPOLYGON (((-79.41729 3...\n3  MULTIPOLYGON (((-76.9486 40...\n4  MULTIPOLYGON (((-76.2828 41...\n5  MULTIPOLYGON (((-80.01073 3...\n6  MULTIPOLYGON (((-78.37688 4...\n7  MULTIPOLYGON (((-79.69286 4...\n8  MULTIPOLYGON (((-77.62503 4...\n9  MULTIPOLYGON (((-75.60805 4...\n10 MULTIPOLYGON (((-75.5055 41...\n\n\n\n#all counties in the US\nall_counties_withgeo <- get_acs(geography = \"county\",\n                       variables = c(myvars),\n                       output = \"wide\",\n                       geometry = TRUE)\n\nGetting data from the 2017-2021 5-year ACS\n\n\nDownloading feature geometry from the Census website.  To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`.\n\nall_counties_withgeo\n\nSimple feature collection with 3221 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -179.1489 ymin: 17.88328 xmax: 179.7785 ymax: 71.36516\nGeodetic CRS:  NAD83\nFirst 10 features:\n   GEOID                              NAME totalpopE totalpopM medincomeE\n1  20161              Riley County, Kansas     72602        NA      53296\n2  19159             Ringgold County, Iowa      4739        NA      57700\n3  30009            Carbon County, Montana     10488        NA      63178\n4  16007           Bear Lake County, Idaho      6327        NA      60337\n5  55011         Buffalo County, Wisconsin     13314        NA      61167\n6  31185             York County, Nebraska     14164        NA      66337\n7  08037            Eagle County, Colorado     55693        NA      91338\n8  42129 Westmoreland County, Pennsylvania    355107        NA      64708\n9  40079         Le Flore County, Oklahoma     48436        NA      43049\n10 48053              Burnet County, Texas     48424        NA      65363\n   medincomeM medageE medageM labor_forceE labor_forceM\n1        2489    25.5     0.1        61693          196\n2        5058    44.3     1.0         3730           50\n3        4261    50.7     0.9         8827           58\n4        7039    38.9     1.1         4812           43\n5        2352    46.5     0.5        10945           44\n6        4128    39.5     1.2        11208           84\n7        4058    37.8     0.8        45189          204\n8        1350    47.1     0.2       297611          354\n9        1869    38.8     0.3        37963           99\n10       4694    44.7     0.3        39487          202\n                         geometry\n1  MULTIPOLYGON (((-96.96095 3...\n2  MULTIPOLYGON (((-94.47167 4...\n3  MULTIPOLYGON (((-109.7987 4...\n4  MULTIPOLYGON (((-111.6345 4...\n5  MULTIPOLYGON (((-92.08384 4...\n6  MULTIPOLYGON (((-97.82629 4...\n7  MULTIPOLYGON (((-107.1137 3...\n8  MULTIPOLYGON (((-79.90487 4...\n9  MULTIPOLYGON (((-95.05996 3...\n10 MULTIPOLYGON (((-98.45924 3...\n\n\n\n#remove MOE columns - they all end with \"M\"\npa_counties_withgeo <- pa_counties_withgeo %>%\n  select(-ends_with(\"M\"))\n\npa_counties_withgeo\n\nSimple feature collection with 67 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -80.51989 ymin: 39.7198 xmax: -74.68952 ymax: 42.26986\nGeodetic CRS:  NAD83\nFirst 10 features:\n   GEOID                                NAME totalpopE medincomeE medageE\n1  42129   Westmoreland County, Pennsylvania    355107      64708    47.1\n2  42111       Somerset County, Pennsylvania     74331      54332    46.2\n3  42097 Northumberland County, Pennsylvania     91853      51005    44.4\n4  42131        Wyoming County, Pennsylvania     26389      62795    45.2\n5  42051        Fayette County, Pennsylvania    129443      51321    45.1\n6  42027         Centre County, Pennsylvania    158879      64995    33.5\n7  42005      Armstrong County, Pennsylvania     65967      56838    47.0\n8  42041     Cumberland County, Pennsylvania    257333      77001    40.5\n9  42095    Northampton County, Pennsylvania    311359      77103    42.1\n10 42127          Wayne County, Pennsylvania     51244      56744    48.4\n   labor_forceE                       geometry\n1        297611 MULTIPOLYGON (((-79.90487 4...\n2         62347 MULTIPOLYGON (((-79.41729 3...\n3         75849 MULTIPOLYGON (((-76.9486 40...\n4         21960 MULTIPOLYGON (((-76.2828 41...\n5        107462 MULTIPOLYGON (((-80.01073 3...\n6        137688 MULTIPOLYGON (((-78.37688 4...\n7         54898 MULTIPOLYGON (((-79.69286 4...\n8        210420 MULTIPOLYGON (((-77.62503 4...\n9        257106 MULTIPOLYGON (((-75.60805 4...\n10        43736 MULTIPOLYGON (((-75.5055 41...\n\n\n\n#remove that trailing \"E\"\ncolnames(pa_counties_withgeo) <- sub(\"E$\", \"\", colnames(pa_counties_withgeo)) # $ means end of string only\n\npa_counties_withgeo\n\nSimple feature collection with 67 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -80.51989 ymin: 39.7198 xmax: -74.68952 ymax: 42.26986\nGeodetic CRS:  NAD83\nFirst 10 features:\n   GEOID                                 NAM totalpop medincome medage\n1  42129   Westmoreland County, Pennsylvania   355107     64708   47.1\n2  42111       Somerset County, Pennsylvania    74331     54332   46.2\n3  42097 Northumberland County, Pennsylvania    91853     51005   44.4\n4  42131        Wyoming County, Pennsylvania    26389     62795   45.2\n5  42051        Fayette County, Pennsylvania   129443     51321   45.1\n6  42027         Centre County, Pennsylvania   158879     64995   33.5\n7  42005      Armstrong County, Pennsylvania    65967     56838   47.0\n8  42041     Cumberland County, Pennsylvania   257333     77001   40.5\n9  42095    Northampton County, Pennsylvania   311359     77103   42.1\n10 42127          Wayne County, Pennsylvania    51244     56744   48.4\n   labor_force                       geometry\n1       297611 MULTIPOLYGON (((-79.90487 4...\n2        62347 MULTIPOLYGON (((-79.41729 3...\n3        75849 MULTIPOLYGON (((-76.9486 40...\n4        21960 MULTIPOLYGON (((-76.2828 41...\n5       107462 MULTIPOLYGON (((-80.01073 3...\n6       137688 MULTIPOLYGON (((-78.37688 4...\n7        54898 MULTIPOLYGON (((-79.69286 4...\n8       210420 MULTIPOLYGON (((-77.62503 4...\n9       257106 MULTIPOLYGON (((-75.60805 4...\n10       43736 MULTIPOLYGON (((-75.5055 41...\n\n\nMapping Pennsylvania counties with mapview\n\nmapview(pa_counties_withgeo, zcol = \"labor_force\")\n\n\n\n\n\n\nCustomize colors\n\nmapview(pa_counties_withgeo, zcol = \"labor_force\", \n         col.regions = RColorBrewer::brewer.pal(9, \"Blues\"), \n         alpha.regions = 1)\n\nWarning: Found less unique colors (9) than unique zcol values (67)! \nInterpolating color vector to match number of zcol values.\n\n\n\n\n\n\n\n\nmap_labor_force <- mapview(pa_counties_withgeo, zcol = \"labor_force\", \n         col.regions = RColorBrewer::brewer.pal(9, \"Blues\"), \n         alpha.regions = 1)\n\nWarning: Found less unique colors (9) than unique zcol values (67)! \nInterpolating color vector to match number of zcol values.\n\n\nCustomize labels\n\nmylabel <- glue::glue(\"{pa_counties_withgeo$NAM} \")\n\n\nmap_labor_force <- mapview(pa_counties_withgeo, zcol = \"labor_force\", \n         col.regions = RColorBrewer::brewer.pal(9, \"Greens\"), \n         alpha.regions = 1,\n         label = mylabel)\n\nWarning: Found less unique colors (9) than unique zcol values (67)! \nInterpolating color vector to match number of zcol values.\n\n\nCustomize popups\n\nmypopup <- glue::glue(\"<strong>{pa_counties_withgeo$NAM}</strong><br />\n                      Total Population: {pa_counties_withgeo$totalpop}<br />\n                     Labor Force Population: {pa_counties_withgeo$labor_force}<br />\n                      Median Income: {pa_counties_withgeo$medincome}\") %>% \n  lapply(htmltools::HTML)\n\n# mylabel <- glue::glue(\"{all_data$State} {all_data$PctChange10_20}%\") %>%\n#   lapply(htmltools::HTML)\n\n\nhead(mypopup)\n\n[[1]]\n<strong>Westmoreland County, Pennsylvania</strong><br />\n Total Population: 355107<br />\nLabor Force Population: 297611<br />\n Median Income: 64708\n\n[[2]]\n<strong>Somerset County, Pennsylvania</strong><br />\n Total Population: 74331<br />\nLabor Force Population: 62347<br />\n Median Income: 54332\n\n[[3]]\n<strong>Northumberland County, Pennsylvania</strong><br />\n Total Population: 91853<br />\nLabor Force Population: 75849<br />\n Median Income: 51005\n\n[[4]]\n<strong>Wyoming County, Pennsylvania</strong><br />\n Total Population: 26389<br />\nLabor Force Population: 21960<br />\n Median Income: 62795\n\n[[5]]\n<strong>Fayette County, Pennsylvania</strong><br />\n Total Population: 129443<br />\nLabor Force Population: 107462<br />\n Median Income: 51321\n\n[[6]]\n<strong>Centre County, Pennsylvania</strong><br />\n Total Population: 158879<br />\nLabor Force Population: 137688<br />\n Median Income: 64995\n\n\n\nmap_labor_force <- mapview(pa_counties_withgeo, zcol = \"labor_force\", \n         col.regions = RColorBrewer::brewer.pal(9, \"Blues\"), \n         alpha.regions = 1,\n         popup = mypopup,\n          label = mylabel)\n\nWarning: Found less unique colors (9) than unique zcol values (67)! \nInterpolating color vector to match number of zcol values.\n\nmap_labor_force"
  }
]